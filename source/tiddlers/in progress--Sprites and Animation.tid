created: 20210620073136335
modified: 20210620093616241
tags: [[Table of Contents]]
title: in progress--Sprites and Animation

Projectile management is, starting from 0.2.0, available from both the encounter and the wave scripts. As
a result it is now in its own section.

<span class="function">CreateLayer(<span class="string"></span> name,
<span class="string"></span> position = "BelowArena", <span class="boolean"></span> below = false) returns <span class="boolean"></span> [E/M/W]</span>
Creates a layer named <span class="term">name</span> that sprites can be placed in. To create your new sprite layer, you'll need to choose a pre-existing layer. Returns <span class="term">true</span> if the layer was successfully created, <span class="term">false</span> otherwise.


<span class="term">position</span> can be one of three values:
<ul>
<li><span class="term">(Name of existing sprite layer)</span>: Your new layer will be created above or below the specified layer.<br>
See below for default layers and how to use <span class="term">below</span>.</li>
<li><span class="term">"VeryHighest"</span>: Your new sprite layer will be created as high as possible, above everything else.<br>
<b>This will make your layer appear above the debugger!</b></li>
<li><span class="term">"VeryLowest"</span>: Your new sprite layer will be created as low as possible, below everything else.</li>
</ul>

If <span class="term">below</span> is true, the new layer will be created below the layer given in <span class="term">position</span>.
Otherwise, it will be above it.

Default layers:

* <span class="term">"Bottom"</span>: Under everything, even the background.
* <span class="term">"BelowUI"</span>: Above the background.

* <span class="term">"BelowArena" or "BasisNewest"</span>: Above the background and the UI.

* <span class="term">"BelowPlayer"</span>: Above the background, the UI and the Arena.

* <span class="term">"BelowBullet"</span>: Above the background, the UI, the Arena and the Player.


* <span class="term">"Top"</span>: Above everything.


<span class="function">CreateSprite(<span class="string"></span> spritename,
<span class="string"></span> layer = "BelowArena", <span class="number"></span> childNumber = -1) returns <span class="userdata">sprite</span> [E/M/W]</span>
Creates a sprite at the center of the screen (at 320, 240) that you can modify in many ways.

You can add a layer if you want - otherwise, the sprite will be below the arena. <br>
From in the Overworld, the default value for <span class="term">layer</span> is <span class="term">"Default"</span> instead. <br>
Enter <span class="term">"none"</span> to spawn your sprite outside of any layers, in the same way that the player is by default
(although this doesn't have much use).

In CYF, you can provide a number argument for <span class="term">childNumber</span> if you want.<br>
Leave it as <span class="term">-1</span> to have it move to the top of whatever layer it's placed on (default behavior), or
choose a numbered index you want it to appear in, with <span class="term">1</span> being the very bottom-most in the layer,
and higher numbers moving it above other elements in sequence.

The best way to see what order sprites come in in their respective layers is to download Unity, playtest your mod in it, and look at the order of game objects in the Inspector. See <span class="ref">Unity Setup (Optional)</span> for instructions on this
(note that this is optional and only if you would like a better understanding of how layers work).

<span class="function">CreateSprite(<span class="string"></span> spritename,
<span class="number"></span> childNumber = -1) returns <span class="userdata">sprite</span> [E/M/W]</span>
The same as <span class="term">CreateSprite</span> listed above, except you only need to provide a sprite name and child number.

Uses the default layer <span class="term">"BelowArena"</span> in battles, or <span class="term">"Default"</span> in the Overworld.

<hr>

!! The Sprite object

The Sprite object has many controls intended for animation. There is a working intermediate example
included in the Examples folder.

<span class="function"><span class="string"></span> sprite.spritename (readonly)</span>

Returns the path of the image used by this sprite, starting from the <span class="term">Sprites/</span> folder.

<span class="function"><span class="number"></span> sprite.x</span>

Horizontal position of sprite relative to the bottom left corner of the screen, measured from its pivot/anchor point (center by default).

If parented, x position is relative to the parent.

<span class="function"><span class="number"></span> sprite.y</span>
Vertical position of sprite relative to the bottom left corner of the screen, measured from its pivot/anchor point (center by default).

If parented, y position is relative to the parent.

<span class="function"><span class="number"></span> sprite.z</span>
Layering position of sprite <i>in the Overworld only</i>. A negative number brings it forward (closer to the camera), a positive
number sends it backwards (farther into the background).

Note that the only thing this will affect is how your sprite and its children appear in front of the Player and Event objects.

This variable can NOT be used to circumvent the layering system for regular sprites.

If parented, z position is relative to the parent.

<span class="function"><span class="number"></span> sprite.absx</span>
Horizontal position of sprite relative to the bottom left corner of the screen, ignoring its pivot/anchor point and all parents.

<span class="function"><span class="number"></span> sprite.absy</span>
Vertical position of sprite relative to the bottom left corner of the screen, ignoring its pivot/anchor point and all parents.

<span class="function"><span class="number"></span> sprite.absz</span>
Layering position of sprite <i>in the Overworld only</i>. A negative number brings it forward (closer to the camera), a positive
number sends it backwards (farther into the background).

Same as <span class="term">sprite.z</span>, except that if this sprite has a parent, <span class="term">sprite.absz</span> will not
be relative to the z value of the parent.

<span class="function"><span class="number"></span> sprite.xscale</span>
Horizontal scaling of sprite (<span class="term">1.0</span> by default).
<span class="term">2.0</span> is twice as large, <span class="term">0.5</span> is half as large.

Scaling applies based on the sprite's pivot point - see <span class="term">SetPivot</span>,
<span class="term">xpivot</span> and <span class="term">ypivot</span>.

However, in the Overworld, Event object sprites ignore pivot when scaling.

<span class="function"><span class="number"></span> sprite.yscale</span>
Vertical scaling of sprite (<span class="term">1.0</span> by default).
<span class="term">2.0</span> is twice as large, <span class="term">0.5</span> is half as large.

Scaling applies based on the sprite's pivot point - see <span class="term">SetPivot</span>,
<span class="term">xpivot</span> and <span class="term">ypivot</span>.

However, in the Overworld, Event object sprites ignore pivot when scaling.

<span class="function"><span class="boolean"></span> sprite.isactive (readonly)</span>
<span class="unitale"></span> Returns <span class="term">true</span> if the sprite has been removed and <span class="term">false</span> otherwise.

<b>In retromode, behaves the same as 0.2.1a</b>.

If not in retromode, this is <span class="term">false</span> if the sprite has been removed and <span class="term">true</span> otherwise.

<span class="function"><span class="number"></span> sprite.width (readonly)</span>
Gives the width of the sprite object's active image in pixels.

This never changes until the sprite itself is swapped.

NOTE: Does not take <span class="term">sprite.xscale</span> into account.

<span class="function"><span class="number"></span> sprite.height (readonly)</span>
Gives the height of the sprite object's active image in pixels.

This never changes until the sprite itself is swapped.

NOTE: Does not take <span class="term">sprite.yscale</span> into account.

<span class="function"><span class="number"></span> sprite.xpivot</span>
Horizontal pivot point of the sprite. <span class="term">0</span> is the left side, and <span class="term">1</span> is the right side.

Can be any number inside or outside of this range.

<span class="term">0.5</span> by default.

See <span class="term">sprite.SetPivot</span>.

<span class="function"><span class="number"></span> sprite.ypivot</span>
Vertical pivot point of the sprite. <span class="term">0</span> is the bottom side, and <span class="term">1</span> is the top side.

Can be any number inside or outside of this range.

<span class="term">0.5</span> by default.

See <span class="term">sprite.SetPivot</span>.

<span class="function"><span class="boolean"></span> sprite.animcomplete (readonly)</span>
If a sprite has started an animation, this tells you if the animation is complete.

If a sprite does not have an active animation, if the animation's loop mode is <span class="term">LOOP</span>,
or if the animation isn't finished yet, this will be <span class="term">false</span>. Otherwise, it will be <span class="term">true</span>.

<span class="function"><span class="number"></span> sprite.currentframe</span>
If a sprite has an active animation running, this represents the index of the active frame in the animation.

Otherwise, this will return <span class="term">0</span>.

For example: If this code is run:

```lua
sprite.SetAnimation({"sans_head1", "sans_head2", "sans_head3", "sans_head2"})
```
Then this variable will be <span class="term">1</span> when the first image is shown, <span class="term">2</span> for the second, and so on, up to <span class="term">4</span> for the last one.

Likewise, setting <span class="term">sprite.currentframe = 3</span> with the above example will jump the animation to the first frame where
<span class="term">"sans_head3"</span> would be the currently shown image.

<span class="function"><span class="number"></span> sprite.currenttime</span>
If a sprite has an active animation running, this represents its current play time, in seconds.

Can both be read and set.

If an animation is not running, this will be <span class="term">0</span>.

Similar in function to <span class="term">NewAudio.GetPlayTime</span> / <span class="term">NewAudio.GetCurrentTime</span>.

<span class="function"><span class="number"></span> sprite.totaltime (read-only)</span>
If a sprite has an active animation running, this represents the total amount of time its animation will last for.

Can both be read and set.

Note that this is based on the speed the animation runs at, and will always be equal to
(<span class="term">sprite.animationspeed</span> * the number of frames in a sprite's animation).

If an animation is not running, this will be <span class="term">0</span>.

Similar in function to <span class="term">NewAudio.GetTotalTime</span>.

<span class="function"><span class="number"></span> sprite.animationspeed</span>
If a sprite has an active animation running, this represents the amount of seconds each frame will be displayed for.

Can both be read and set. Must be > 0.

<span class="function"><span class="boolean"></span> sprite.animationpaused</span>
If a sprite has an active animation running, you can set this to <span class="term">true</span> to pause it, or <span class="term">false</span> to resume it.

<span class="function"><span class="string"></span> sprite.loopmode</span></span>
Gets the loop mode of a sprite's current animation, or

sets the loop mode of a sprite's <u>next</u> animation.

Can be:

* <span class="term">LOOP</span> - The default mode: when the animation is finished, it plays again.
<span class="term">animcomplete</span> is always false with this mode.

* <span class="term">ONESHOT</span> - Plays the animation once. The sprite object will remain on the last frame of the animation.

* <span class="term">ONESHOTEMPTY</span> - Same as <span class="term">ONESHOT</span>, except that when the animation is finished, the sprite object will use an empty sprite.

<span class="function"><span class="luatable"><span class="number"></span>, <span class="number"></span>, <span class="number"></span>, <span class="number"></span> = 1 </span> sprite.color</span>
Gets or sets the coloration of a sprite, as a table of 3 or 4 values from 0 to 1.

For example, <span class="term">sprite.color = {1.0, 0.0, 0.0}</span> colors the sprite red. This actually overlays the sprite's
original color, so if you want full control over the color, make sure your sprite is white. <i>Black areas are not affected by
coloration.</i>

<span class="CYF"></span>: You can provide a 4th value, which sets the alpha (transparency) of the sprite.

<span class="function"><span class="luatable"><span class="number"></span>, <span class="number"></span>, <span class="number"></span>, <span class="number"></span> = 255 </span> sprite.color32</span></span>
Gets or sets the coloration of a sprite, as a table of 3 or 4 values from 0 to 255.

For example, <span class="term">sprite.color32 = {255, 0, 0}</span> colors the sprite red. This actually overlays the sprite's
original color, so if you want full control over the color, make sure your sprite is white. <i>Black areas are not affected by
coloration.</i>

You can provide a 4th value, which sets the alpha (transparency) of the sprite.

<span class="function"><span class="number"></span> sprite.alpha</span>
Gets or sets a sprite's transparency, as a value from 0 to 1.

<span class="function"><span class="number"></span> sprite.alpha32</span>
Gets or sets a sprite's transparency, as a value from 0 to 255.

<span class="function"><span class="number"></span> sprite.rotation</span>
Gets or sets a sprite's rotation, in degrees.

It's clamped between 0 and 360, so if you set it to 365, it will become 5.

<span class="function"><span class="string"></span> sprite.layer</span>

Gets or sets the current layer a sprite is on. Does nothing if you set it to a layer that doesn't exist.

Default value: <span class="term">"BelowArena"</span> (or <span class="term">"Default"</span> in the Overworld)

Overworld Event sprites and Text Objects letter sprites can not have their layers set.

<span class="function">sprite.Set(<span class="string"></span> newSprite)</span>
Change a sprite's current image. It retains its scaling and rotation.

If you have an animation running with <span class="term">SetAnimation</span>, the animation will override your sprite change.

<span class="function">sprite.SetParent(<span class="userdata">sprite</span> otherSpriteObject)</span>
Parents <span class="term">sprite</span> to <span class="term">otherSpriteObject</span>.

This will make the original sprite move along with the object it's parented to.

NOTE: If you are in the <i>Overworld</i>, you can NOT use this to parent sprites to Event objects' sprites,
or vice versa.

Text Object letter sprites can <i>only</i> be parented to other Text Object letter sprites.

<span class="function">sprite.Mask(<span class="string"></span> mode)</span>
Sets the masking mode of this sprite object. Does not function for Overworld Event sprites or Text Object letter sprites!

Available modes are:
* <span class="term">off</span> - The default mode. Has no special properties.

* <span class="term">box</span> - Any objects parented to this sprite are restricted to the bounding box of the sprite. Recommended for masking
bullets to the Arena and such things. Unfortunately doesn't seem to work well with rotated sprites, but this is still the recommended mode for
performance.

* <span class="term">sprite</span> - Any objects parented to this sprite will be "cookie cuttered" to the current image of the sprite.

* <span class="term">stencil</span> - Same as <span class="term">sprite</span>, except that the parent sprite itself is not visible.

* <span class="term">invertedsprite</span> - The reverse of <span class="term">sprite</span>; while the sprite itself is visible, any of its
children will only display when not inside the bounds of the sprite.

* <span class="term">invertedstencil</span> - Identical to <span class="term">invertedsprite</span> except that the parent sprite is not shown.

Anything parented to this sprite object through the use of <span class="term">SetParent</span> - including <b>Other Sprite Objects</b>,
<b>Projectiles</b>, and even <b>Text Objects</b> - will all be masked according to the mask mode entered here.

If using <span class="term">invertedsprite</span> or <span class="term">invertedstencil</span>, you may be unable to change the mask mode
back to a normal mode afterwards (other than "off"). We fear this issue is unavoidable and unfixable - as these inverted mask modes work by directly
altering Unity's image display code.

<b>NOTE:</b> If you want to have a child that's not masked, you'll need to create a new invisible sprite (using the default
sprite "empty" is recommended), parent both the intended parent and child sprite to the invisible sprite, and apply motion to the invisible
sprite rather than the parent sprite.

<span class="function new"><span class="userdata">shader</span> sprite.shader</span></span>
The shader object linked to this sprite object.

Be aware that due to the nature of shaders, it is possible for some shaders to break certain Create Your Frisk properties,
such as sprite layering and sprite masking.

It is recommend that shaders used be based on the template shader provided in <span class="ref">Coding a Shader</span>.

See <span class="ref">The Shader Object</span> for more information.

<span class="function">sprite.SetPivot(<span class="number"></span> x, <span class="number"></span> y)</span>
Changes the point a sprite rotates and scales around.

<span class="term">(0, 0)</span> is the bottom-left corner of the sprite, <span class="term">(1, 1)</span> is the top-right corner.

You can also have values outside the 0-1 range.

<span class="function">sprite.SetAnchor(<span class="number"></span> x, <span class="number"></span> y)</span>
Changes the point a sprite anchors to when moving.

Most useful when rescaling a parent sprite and making this child sprite stick to a certain edge of it.

<span class="term">x</span> and <span class="term">y</span> should be between 0 and 1.

<span class="function">sprite.Move(<span class="number"></span> x, <span class="number"></span> y)</span>
Moves the sprite <span class="term">x</span> pixels right, and <span class="term">y</span> pixels up.

See <span class="term">sprite.x</span> and <span class="term">sprite.y</span>.

<span class="function">sprite.MoveTo(<span class="number"></span> x, <span class="number"></span> y)</span>
Same as setting x and y simultaneously.

See <span class="term">sprite.x</span> and <span class="term">sprite.y</span>.

<span class="function">sprite.MoveToAbs(<span class="number"></span> x, <span class="number"></span> y)</span>
Same as setting absx and absy simultaneously. Moves a sprite to an absolute screen position, regardless of its parent settings.

See <span class="term">sprite.absx</span> and <span class="term">sprite.absy</span>.

<span class="function">sprite.Scale(<span class="number"></span> xscale, <span class="number"></span> yscale)</span>
Same as setting xscale and yscale simultaneously.

See <span class="term">sprite.xscale</span> and <span class="term">sprite.yscale</span>.

<span class="function">sprite.SetAnimation(<span class="luatable"><span class="string"></span></span> spriteTable, <span class="number"></span> timePerFrame = 1/30, <span class="string"></span> prefix = "")</span>
Performs frame-by-frame animation with your own time
between frames, in seconds. It's the same as changing the sprite object's image with <span class="term">sprite.Set</span>
on a set timer. If <span class="term">time_per_frame</span> is 1, it takes 1 second to move to the next sprite.

Example:
<span class="term">sprite.SetAnimation({"sans_head1", "sans_head2", "sans_head3"})</span>

<span class="term">prefix</span>: An optional string providing the path to a folder contained within your Sprites folder. This path will be automatically added to the beginning of every sprite's name.

For example, you can load your collection of 6 sprites in <span class="term">Sprites/character</span> with <span class="term">sprite.SetAnimation({"spr1", "spr2", "spr3", "spr4", "spr5", "spr6"}, 1/30, "character")</span>.

This can use sprites with different sizes!

<span class="function">sprite.StopAnimation()</span>
Stops a frame-by-frame animation if it was running.

Does NOT reset your sprite's image back to its previous one! Instead, use <span class="term">sprite.Set()</span> just after this function.

<span class="function">sprite.SendToTop()</span>
Sends this sprite to the top of its layer's hierarchy. If a sprite has 5
children, for instance, you can use this to rearrange them internally. However, child sprites will
always appear on top of their parents, regardless of this function being called.

<span class="function">sprite.SendToBottom()</span>
Sends this sprite to the bottom of its layer's hierarchy. Similar rules apply as with <span class="term">SendToTop()</span>.

<span class="function">sprite.MoveBelow(<span class="userdata">sprite</span> otherSpriteObject)</span>
If both sprites have the same parent, this will move the calling sprite just below the other sprite.

<span class="function">sprite.MoveAbove(<span class="userdata">sprite</span> otherSpriteObject)</span>
If both sprites have the same parent, this will move the calling sprite just above the other sprite.

<span class="function">sprite.Remove()</span>
Removes a sprite object. Calling anything other than <span class="term">isactive</span> after this will give you an error.

Removing a sprite object will also remove all <i>children</i> of the sprite object.

<font color="#fff" style="font-size: 15px;">NOTE: Calling <span class="term">bullet.sprite.Remove</span> will
instead call <span class="term">bullet.Remove</span>, unless you are using retromode.</font>

<span class="function">sprite.SetVar(<span class="string"></span> yourVariableName, value)

</span>or <span class="function">sprite[<span class="string"> yourVariableName</span>]</span>
Sets a variable in a sprite object that you can retrieve with <span class="term">sprite.GetVar</span>.

Identical to <span class="term">SetVar</span> in projectiles.

<span class="function">sprite.GetVar(<span class="string"></span> yourVariableName)

</span>or <span class="function">sprite[<span class="string"> yourVariableName</span>] = value</span>
Gets a variable in a sprite object that you previously set with <span class="term">sprite.SetVar</span>.

Identical to <span class="term">GetVar</span> in projectiles.

<span class="function">sprite.Dust(<span class="boolean"></span> playSound=true, <span class="boolean"></span> removeObject = false)</span>
Turns a sprite into dust, just like what happens in Undertale when an enemy is killed.

Will remove a <strike>bullet or</strike> sprite if <span class="term">removeObject</span> is set to true.

Set <span class="term">playSound</span> to false to deactivate the dust sound.

<font color="#fff" style="font-size: 15px;">* NOTE: Calling <span class="term">bullet.sprite.Dust(..., true)</span>
will call <span class="term">bullet.Remove</span>, unless you are using retromode.</font>

<hr>

The animation script used in the example is shown below for reference.

```lua
-- First, we can create the torso, legs and head.
sanstorso = CreateSprite("sans/sanstorso")
sanslegs = CreateSprite("sans/sanslegs")
sanshead = CreateSprite("sans/sanshead1")

--We parent the torso to the legs, so when you move the legs, the torso moves too.
--We do the same for attaching the head to the torso.
sanstorso.SetParent(sanslegs)
sanshead.SetParent(sanstorso)

--Now we adjust the height for the individual parts so they look more like a skeleton and less like a pile of bones.
sanslegs.y = 240
sanstorso.y = -5 --The torso's height is relative to the legs they're parented to.
sanshead.y = 40 --The head's height is relative to the torso it's parented to.

--We set the torso's pivot point to halfway horizontally, and on the bottom vertically,
--so we can rotate it around the bottom instead of the center.
sanstorso.SetPivot(0.5, 0)

--We set the torso's anchor point to the top center. Because the legs are pivoted on the bottom (so rescaling them only makes them move up),
--we want the torso to move along upwards with them.
sanstorso.SetAnchor(0.5, 1)
sanslegs.SetPivot(0.5, 0)

--Finally, we do some frame-by-frame animation just to show off the feature. You put in a list of sprites,
--and the time you want a sprite change to take. In this case, it's 1/2 of a second.
sanshead.SetAnimation({"sans/sanshead1", "sans/sanshead2", "sans/sanshead3"}, 1/2)

function AnimateSans()
sanslegs.Scale(1, 1+0.1*math.sin(Time.time*2))
sanshead.MoveTo(2*math.sin(Time.time), 40 + 2*math.cos(Time.time))
sanshead.rotation = 10*math.sin(Time.time + 1)
sanstorso.rotation = 10*math.sin(Time.time + 2)
end
```
